#include <iostream>
#include <cmath>
#include <vector>

using namespace std;
vector<vector<int>> board(50, vector<int>(50,0));
int wayx[4] = {0, 1, 0, -1};
int wayy[4] = {-1, 0, 1, 0};
int m, n, clean = 1;
pair<int, pair<int,int>> move(int r, int c, int d, int cnt)
{

    int x = r + wayx[d];
    int y = c + wayy[d];
    if(cnt == 4)
    {
        if(board[r+wayx[(d+1)%4]][c+wayy[(d+1)%4]] == 1) return make_pair(-1, make_pair(-1, -1));
        return make_pair(d, make_pair(r+wayx[(d+1)%4], c+wayy[(d+1)%4]));
    }
    if(board[x][y] != 0)
        return move(r, c, (d+1)%4, cnt+1);
    board[x][y] = 2;
    clean++;
    
    return make_pair((d+1)%4, make_pair(x, y));
        
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int r, c, d;
    cin>>m>>n;
    cin>>r>>c>>d;
    if(d == 1) d = 4;
    if(d == 3) d = 1;
    if(d == 4) d = 3;
    for(int i = 0; i < m; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin>>board[i][j];
        }
    }
    bool finish = false;
    board[r][c] = 2;
    while(!finish)
    {
        auto next = move(r, c, d, 0);
        d = next.first;
        r = next.second.first;
        c = next.second.second;
        if(d == -1) finish = true;
    }
    cout<<clean;
}
