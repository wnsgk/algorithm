#include <iostream>
#include <vector>
#include <complex>

using namespace std;

typedef complex<double> cpx;
typedef long long ll;
const double PI = acos(-1);

void fft(vector<cpx> &a, bool inv)
{
	int n = a.size(), j = 0;
	vector<cpx> roots(n/2);
	for(int i=1; i<n; i++)
	{
		int bit = (n >> 1);
		while(j >= bit)
		{
			j -= bit;
			bit >>= 1;
		}
		j += bit;
		if(i < j) swap(a[i], a[j]);
	}
	double ang = 2 * acos(-1) / n * (inv ? -1 : 1);
	for(int i=0; i<n/2; i++)
	{
		roots[i] = cpx(cos(ang * i), sin(ang * i));
	}
	for(int i = 2; i <= n; i <<= 1)
	{
		int step = n / i;
		for(int j = 0; j < n; j+=i)
		{
			for(int k = 0; k < i/2; k++)
			{
				cpx u = a[j+k], v = a[j+k+i/2] * roots[step * k];
				a[j+k] = u+v;
				a[j+k+i/2] = u-v;
			}
		}
	}
	if(inv) 
	{
	    for(int i = 0; i < n; i++) a[i] /= n;
	}
}

vector<ll> multiply(vector<ll> &v, vector<ll> &w)
{
	vector<cpx> fv(v.begin(), v.end()), fw(w.begin(), w.end());
	int n = 2; 

	
	while(n < v.size() + w.size()) n <<= 1;
	
	fv.resize(n);
	fw.resize(n);
	
	fft(fv, false); fft(fw, false);
	
	for(int i = 0; i < n; i++) fv[i] *= fw[i];
	
	fft(fv, true);
	
	vector<ll> ret(n);	
	for(int i = 0; i < n; i++) ret[i] = (ll)round(fv[i].real());
	
	return ret;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    string s1, s2;
    cin>>s1>>s2;
    vector<ll> a(s1.length());
    vector<ll> b(s2.length());
    if(s1[0] == '0' || s2[0] == '0')
    {
        cout<<0;
        return 0;
    }
    for(int i = s1.length()-1; i >= 0; i--)
    {
        a[i] = s1[s1.length()-1-i]-'0';
    }
    for(int i = s2.length()-1; i >= 0; i--)
    {
        b[i] = s2[s2.length()-1-i]-'0';
    }

    vector<ll> c;
    c = multiply(a, b);
    for(int i = 0; i < c.size()-1; i++) 
    {
        c[i+1] += c[i]/10;
        c[i] %= 10;
    }
    //for(int i = 0; i < c.size(); i++) cout<<c[i]<<endl;
    int i = c.size()-1;
    while(c[i] == 0) i--;
    for(; i >= 0; i--)
        cout<<c[i];
    return 0;
}
