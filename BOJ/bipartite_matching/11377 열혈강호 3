#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n, m, k, MAX = 1001;
vector<int> A(MAX*2, -1), B(MAX, -1);
vector<vector<int>> adj(MAX*2);
vector<int> visit(MAX*2);

int dfs(int a){
    visit[a] = 1;
    for(int b: adj[a]){
        if(B[b] == -1 || !visit[B[b]] && dfs(B[b])){
            A[a] = b;
            B[b] = a;
            return 1;
        }
    }
    return 0;
}
 
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin>>n>>m>>k;
    for(int i=0; i<n; i++){
        int s;
        cin>>s;
        for(int j=0; j<s; j++){
            int k;
            cin>>k;
            adj[i].push_back(k);
            adj[i+n].push_back(k);
        }
    }
 
    int cnt = 0;
    for(int i=0; i<n; i++){
        if(A[i] == -1){
            for(int j = 0; j < 2*n; j++) visit[j] = 0;
            if(dfs(i)) cnt++;
        }
    }
    int cnt2 = 0;
    for(int i=n; i<2*n; i++){
        if(A[i] == -1){
            for(int j = 0; j < 2*n; j++) visit[j] = 0;
            if(dfs(i)) cnt2++;
        }
        if(cnt2 == k) break;
    }
    cout<<cnt+cnt2;
    return 0;
}
