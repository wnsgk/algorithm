/*
S2
*/
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

vector<int> visit(1001);

void dfs(vector<vector<int>>& graph, int v)
{
    cout<<v<<" ";
    visit[v] = 1;
    for(int i = 0; i < graph[v].size(); i++)
    {
        int a = graph[v][i];
        if(visit[a] == 1) continue;
        dfs(graph, a);
    }
}

void bfs(vector<vector<int>>& graph, int v)
{
    visit[v] = 1;
    queue<int> q;
    q.push(v);
    while(!q.empty())
    {
        v = q.front();
        q.pop();
        cout<<v<<" ";
        for(int i = 0; i < graph[v].size(); i++)
        {
            if(visit[graph[v][i]] == 1) continue;
            visit[graph[v][i]] = 1;
            q.push(graph[v][i]);
        }
    }
    
}


int main()
{
    int n, m, v, x, y;

    cin>>n>>m>>v;
    vector<vector<int>> graph(n+1);
    
    for(int i = 1; i < m+1; i++)
    {
        scanf("%d %d", &x, &y);
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    for(int i = 1; i < n+1; i++)
    {
        sort(graph[i].begin(), graph[i].end());
    }
    dfs(graph, v);
    cout<<endl;
    for(int i = 0; i < n+1; i++) visit[i] = 0;
    bfs(graph, v);
    
    return 0;
}
