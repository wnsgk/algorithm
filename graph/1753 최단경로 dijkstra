//방향그래프에서 하나의 정점에서 다른 모든 정점으로 가는 최단거리
//다익스트라
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main()
{
    cin.sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int v, e, start, x, y, z;
    cin>>v>>e>>start;
    vector<vector<pair<int,int>>> info(v+1);        //간선들 사이의 거리에 대한 정보를 저장
    vector<int> dist(v+1, 100000000);               //start로부터 현재 최솟값을 저장
    for(int i = 0; i < e; i++){
        cin>>x>>y>>z;
        info[x].push_back(make_pair(y,z));
    }
    dist[start] = 0;
    priority_queue<pair<int,int>> q;           //다음 최소거리를 구하기 위한 큐
    
    q.push(make_pair(0, start));
    
    while(!q.empty()){
        int curr = q.top().second;
        int d = -q.top().first;               //최소값을 top으로 오게 하려고 -를 붙임
        q.pop();
        if(d > dist[curr]) continue;
        for(int i = 0; i < info[curr].size(); i++){
            int next = info[curr][i].first;
            int nextd = info[curr][i].second;
            if(dist[next] > d + nextd){
                dist[next] = d + nextd;
                q.push(make_pair(-d-nextd, next));
            }
        }
        
    }
    for(int i = 1; i < dist.size(); i++){
        if(dist[i] == 100000000) printf("INF\n");
        else    printf("%d\n", dist[i]);
    }

    return 0;
}
