#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

int id, node[10001], n, e;
vector<vector<int>> SCC;
stack<int> s;
vector<int> visit(10001);
vector<vector<int>> v(10001);

int dfs(int x){
    node[x] = ++id;
    s.push(x);
    
    int parent = node[x];
    
    for (int i=0; i<v[x].size(); i++) {
        int y = v[x][i];
        //방문 안 한 이웃
        if (node[y] == 0) parent = min(parent, dfs(y));
        //처리 중인 이웃
        else if (!visit[y]) parent = min(parent,node[y]);
    }
    
    if (parent==node[x]) {
        vector<int> scc;
        while(1){
            int t = s.top();
            s.pop();
            scc.push_back(t);
            visit[t] = 1;
            if (t==x) break;
        }
        SCC.push_back(scc);
    }
    return parent;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int a, b;
    cin>>n>>e;
    for(int i = 0; i < e; i++) {
        cin>>a>>b;
        v[a].push_back(b);
    }
    
    int ans = 0;
    for(int i = 1; i <= n; i++) {
        if(node[i] == 0) {
            dfs(i);
        }
    }
    for(int i = 0; i < SCC.size(); i++) sort(SCC[i].begin(), SCC[i].end()); 
    sort(SCC.begin(), SCC.end());
    cout<<SCC.size()<<"\n";
    for(int i = 0; i < SCC.size(); i++) {
        for(int j = 0; j < SCC[i].size(); j++) {
            cout<<SCC[i][j]<<" ";
        }
        cout<<"-1\n";
    }
    return 0;
}
