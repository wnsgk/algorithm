#include <iostream> // 9:58~10:03~10:34
#include <vector>
#include <queue>

using namespace std;

int m, n, ans = 0;
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, -1, 1};

vector<vector<int>> visit(1000, vector<int>(1000));
void dfs(vector<vector<int>>& v, int x, int y)
{
    visit[x][y] = ans;
    queue<int> q;
    q.push(x*1000+y);
    while(!q.empty())
    {
        x = q.front()/1000;
        y = q.front()%1000;
        q.pop();
        for(int i = 0; i < 4; i++)
        {
            int x1 = x+dx[i];
            int y1 = y+dy[i];
            if(x1<0 || y1<0 || x1 >= m || y1 >= n) continue;
            if(visit[x1][y1] != 0) continue;
            if(i == v[x][y] || v[x1][y1] + i == 1 || v[x1][y1] + i == 5)
            {
                visit[x1][y1] = ans;
                q.push(x1*1000+y1);
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	
    cin>>m>>n;
    char c;
    vector<vector<int>> v(m, vector<int>(n));
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
        {
            c = cin.get();
            if(c == '\n') c = cin.get();
            if(c == 'D') v[i][j] = 0;
            else if(c == 'U') v[i][j] = 1;
            else if(c == 'L') v[i][j] = 2;
            else v[i][j] = 3;
        }
        
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
        {
            if(visit[i][j] != 0) continue;
            ans++;
            dfs(v, i, j);
        }
    cout<<ans;

    return 0;
}
