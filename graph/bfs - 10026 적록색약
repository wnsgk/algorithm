/*
bfs로 구역을 나눠서 푸는 
bfs 1번 할때 마다 구역이 하나 생김
G5
*/

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int dx[4] = {0,0,1,-1};
int dy[4] = {1,-1,0,0};
int n;
vector<vector<int>> visit(100, vector<int>(100));
void bfs(vector<vector<char>>& graph, int i, int j)
{
    visit[i][j] = 1;
    queue<pair<int, int>> q;
    q.push(make_pair(i,j));
    while(!q.empty())
    {
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        
        for(int k = 0; k < 4; k++)
        {
            int x = a+dx[k];
            int y = b+dy[k];
            if(x>=n || y>=n || x<0 || y<0) continue;
            if(visit[x][y] == 1) continue;
            if(graph[a][b] == graph[x][y])
            {
                visit[x][y] = 1;
                q.push(make_pair(x,y));
            }
        }
    }
}
int main()
{
    cin>>n;
    vector<vector<char>> c(n, vector<char>(n));
    vector<vector<char>> c2(n, vector<char>(n));
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            scanf("%1s", &c[i][j]);
            if(c[i][j] == 'G') c2[i][j] = 'R';
            else c2[i][j] = c[i][j];
        }
    }
    int ans = 0;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
        {
            if(visit[i][j] == 0)
            {
                bfs(c, i, j);
                ans++;
            }
        }
    cout<<ans<<" ";
    ans = 0;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            visit[i][j] = 0;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
        {
            if(visit[i][j] == 0)
            {
                bfs(c2, i, j);
                ans++;
            }
        }
    cout<<ans;
    return 0;
}
