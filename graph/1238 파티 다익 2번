/* 방향 바꿔서 다익 2번
 * G3
 */
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int n, m, x, a, b, c;

vector<int> visit(1001);

void visit_init()
{
    for(int i = 0; i < n+1; i++) visit[i] = 0;
}

void find_path(vector<vector<pair<int,int>>>& v, vector<int>& u)
{
    priority_queue<pair<int,int>> q;
    q.push({0, x});
    while(!q.empty())
    {
        int d = -q.top().first;
        int y = q.top().second;
        q.pop();
        if(visit[y] == 1) continue;
        visit[y] = 1;
        u[y] = d;
        for(int i = 0; i < v[y].size(); i++)
        {
            auto next = v[y][i];
            if(visit[next.first] == 1) continue;
            q.push({-d-next.second, next.first});
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin>>n>>m>>x;
    vector<vector<pair<int,int>>> to_v(1001);
    vector<vector<pair<int,int>>> from_v(1001);
    vector<int> to_x(1001);
    vector<int> from_x(1001);

    for(int i = 0; i < m; i++)
    {
        cin>>a>>b>>c;
        to_v[a].push_back({b,c});
        from_v[b].push_back({a,c});
    }
    
    find_path(to_v, to_x);
    visit_init();
    find_path(from_v, from_x);
    int mx = 0;
    for(int i = 1; i < n+1; i++) mx = max(mx, to_x[i] + from_x[i]);
    cout<<mx;
    return 0;
}
