/*
 * merge sort
 * P5
 */
#include <iostream>
#include <vector>

using namespace std;

int n, A[500001], tmp[500001];
long long ans;
void merge(int p, int q, int r) {
	int i = p, j = q + 1, k = p;
	long long cnt = 0;
	while (i <= q && j <= r) {
		if (A[i] <= A[j]) {
			tmp[k++] = A[i++];
			ans += cnt;
		}
		else {
			tmp[k++] = A[j++];
			cnt++;
		}
	}
	while (i <= q) {
		tmp[k++] = A[i++];
		ans += cnt;
	}
	while (j <= r) {
		tmp[k++] = A[j++];
	}
	for (int t = p; t <= r; t++) A[t] = tmp[t];
}
void merge_sort(int p, int r) {
	if (p < r) {
		int q = p + r >> 1;
		merge_sort(p, q);
		merge_sort(q + 1, r);
		merge(p, q, r);
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) cin >> A[i];
	merge_sort(0, n - 1);
	cout << ans;
	return 0;
}
